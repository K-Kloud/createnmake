name: 'Terraform Infrastructure'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - prod
      cloud_provider:
        description: 'Cloud provider'
        required: true
        default: 'aws'
        type: choice
        options:
          - aws
          - gcp
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  terraform-validate:
    name: 'Validate'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive

    - name: Terraform Init
      id: init
      run: terraform init -backend=false

    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-plan:
    name: 'Plan'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    defaults:
      run:
        working-directory: terraform
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event.inputs.environment || 'staging' }}
        cloud_provider:
          - ${{ github.event.inputs.cloud_provider || 'aws' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      if: matrix.cloud_provider == 'aws'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}

    - name: Authenticate to Google Cloud
      if: matrix.cloud_provider == 'gcp'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      if: matrix.cloud_provider == 'gcp'
      uses: google-github-actions/setup-gcloud@v2

    - name: Terraform Init
      id: init
      run: |
        if [ "${{ matrix.cloud_provider }}" = "aws" ]; then
          terraform init \
            -backend-config="bucket=opentech-terraform-state-${{ matrix.environment }}" \
            -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION || 'us-west-2' }}"
        elif [ "${{ matrix.cloud_provider }}" = "gcp" ]; then
          terraform init \
            -backend-config="bucket=opentech-terraform-state-${{ matrix.environment }}" \
            -backend-config="prefix=${{ matrix.environment }}"
        fi

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan \
          -var-file="environments/${{ matrix.environment }}/terraform.tfvars" \
          -var="cloud_provider=${{ matrix.cloud_provider }}" \
          -var="aws_region=${{ secrets.AWS_REGION || 'us-west-2' }}" \
          -var="gcp_region=${{ secrets.GCP_REGION || 'us-central1' }}" \
          -out=tfplan
      env:
        TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
        TF_VAR_supabase_anon_key: ${{ secrets.SUPABASE_ANON_KEY }}
        TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        TF_VAR_slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        TF_VAR_pagerduty_service_key: ${{ secrets.PAGERDUTY_SERVICE_KEY }}
        TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Terraform Show
      id: show
      run: terraform show -no-color tfplan

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n
          ${{ steps.show.outputs.stdout }}
          \`\`\`

          </details>

          *Environment: ${{ matrix.environment }}, Cloud: ${{ matrix.cloud_provider }}*
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-${{ matrix.environment }}-${{ matrix.cloud_provider }}
        path: terraform/tfplan
        retention-days: 5

  terraform-apply:
    name: 'Apply'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    defaults:
      run:
        working-directory: terraform
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'staging') }}
        cloud_provider:
          - ${{ github.event.inputs.cloud_provider || 'aws' }}

    environment:
      name: ${{ matrix.environment }}
      url: https://${{ matrix.environment == 'prod' && 'openteknologies.com' || format('{0}.openteknologies.com', matrix.environment) }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      if: matrix.cloud_provider == 'aws'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}

    - name: Authenticate to Google Cloud
      if: matrix.cloud_provider == 'gcp'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      if: matrix.cloud_provider == 'gcp'
      uses: google-github-actions/setup-gcloud@v2

    - name: Terraform Init
      run: |
        if [ "${{ matrix.cloud_provider }}" = "aws" ]; then
          terraform init \
            -backend-config="bucket=opentech-terraform-state-${{ matrix.environment }}" \
            -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION || 'us-west-2' }}"
        elif [ "${{ matrix.cloud_provider }}" = "gcp" ]; then
          terraform init \
            -backend-config="bucket=opentech-terraform-state-${{ matrix.environment }}" \
            -backend-config="prefix=${{ matrix.environment }}"
        fi

    - name: Terraform Plan
      run: |
        terraform plan \
          -var-file="environments/${{ matrix.environment }}/terraform.tfvars" \
          -var="cloud_provider=${{ matrix.cloud_provider }}" \
          -var="aws_region=${{ secrets.AWS_REGION || 'us-west-2' }}" \
          -var="gcp_region=${{ secrets.GCP_REGION || 'us-central1' }}" \
          -out=tfplan
      env:
        TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
        TF_VAR_supabase_anon_key: ${{ secrets.SUPABASE_ANON_KEY }}
        TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        TF_VAR_slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        TF_VAR_pagerduty_service_key: ${{ secrets.PAGERDUTY_SERVICE_KEY }}
        TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      env:
        TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
        TF_VAR_supabase_anon_key: ${{ secrets.SUPABASE_ANON_KEY }}
        TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        TF_VAR_slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        TF_VAR_pagerduty_service_key: ${{ secrets.PAGERDUTY_SERVICE_KEY }}
        TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Terraform Output
      id: output
      run: terraform output -json

    - name: Configure kubectl
      run: |
        if [ "${{ matrix.cloud_provider }}" = "aws" ]; then
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION || 'us-west-2' }} --name $(terraform output -raw cluster_name)
        elif [ "${{ matrix.cloud_provider }}" = "gcp" ]; then
          gcloud container clusters get-credentials $(terraform output -raw cluster_name) --region ${{ secrets.GCP_REGION || 'us-central1' }} --project ${{ secrets.GCP_PROJECT_ID }}
        fi

    - name: Verify Deployment
      run: |
        kubectl get nodes
        kubectl get pods -n opentech-webapp-${{ matrix.environment }}
        kubectl get services -n opentech-webapp-${{ matrix.environment }}

    - name: Run Health Check
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=opentech-webapp -n opentech-webapp-${{ matrix.environment }} --timeout=300s
        
        # Port forward and health check
        kubectl port-forward svc/opentech-webapp-service 8080:80 -n opentech-webapp-${{ matrix.environment }} &
        sleep 10
        curl -f http://localhost:8080/health || exit 1

    - name: Create Deployment Summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Key | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | ${{ matrix.environment }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Cloud Provider | ${{ matrix.cloud_provider }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Application URL | $(terraform output -raw application_url) |" >> $GITHUB_STEP_SUMMARY
        if [ "${{ matrix.environment }}" != "dev" ]; then
          echo "| Grafana URL | $(terraform output -raw grafana_url) |" >> $GITHUB_STEP_SUMMARY
          echo "| Prometheus URL | $(terraform output -raw prometheus_url) |" >> $GITHUB_STEP_SUMMARY
        fi
        echo "| Kubectl Config | \`$(terraform output -raw kubectl_config_command)\` |" >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: 'Destroy'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    defaults:
      run:
        working-directory: terraform
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event.inputs.environment }}
        cloud_provider:
          - ${{ github.event.inputs.cloud_provider }}

    environment:
      name: ${{ matrix.environment }}-destroy

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS Credentials
      if: matrix.cloud_provider == 'aws'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}

    - name: Authenticate to Google Cloud
      if: matrix.cloud_provider == 'gcp'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      if: matrix.cloud_provider == 'gcp'
      uses: google-github-actions/setup-gcloud@v2

    - name: Terraform Init
      run: |
        if [ "${{ matrix.cloud_provider }}" = "aws" ]; then
          terraform init \
            -backend-config="bucket=opentech-terraform-state-${{ matrix.environment }}" \
            -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION || 'us-west-2' }}"
        elif [ "${{ matrix.cloud_provider }}" = "gcp" ]; then
          terraform init \
            -backend-config="bucket=opentech-terraform-state-${{ matrix.environment }}" \
            -backend-config="prefix=${{ matrix.environment }}"
        fi

    - name: Terraform Destroy
      run: |
        terraform destroy -auto-approve \
          -var-file="environments/${{ matrix.environment }}/terraform.tfvars" \
          -var="cloud_provider=${{ matrix.cloud_provider }}" \
          -var="aws_region=${{ secrets.AWS_REGION || 'us-west-2' }}" \
          -var="gcp_region=${{ secrets.GCP_REGION || 'us-central1' }}"
      env:
        TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
        TF_VAR_supabase_anon_key: ${{ secrets.SUPABASE_ANON_KEY }}
        TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        TF_VAR_slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        TF_VAR_pagerduty_service_key: ${{ secrets.PAGERDUTY_SERVICE_KEY }}
        TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}

  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov Results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov-results.sarif

    - name: Run TFSec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform
        format: sarif
        output: tfsec-results.sarif

    - name: Upload TFSec Results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: tfsec-results.sarif