import { Share2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";

interface ShareButtonProps {
  creator: {
    name: string;
  };
  imageUrl?: string;
  imageId?: number;
}

export const ShareButton = ({ creator, imageUrl, imageId }: ShareButtonProps) => {
  const { toast } = useToast();

  const handleShare = async () => {
    if (!imageUrl || !imageId) {
      toast({
        title: "Error",
        description: "No image available to share",
        variant: "destructive",
      });
      return;
    }

    try {
      // Get the current hostname without port number
      const hostname = window.location.hostname.split(':')[0];
      
      // Construct the base URL using the hostname
      const baseUrl = `${window.location.protocol}//${hostname}`;
      
      // Create the complete shareable URL without trailing slashes
      const shareableUrl = `${baseUrl}/marketplace?image=${imageId}`.replace(/\/+$/, '');
      
      console.log('Sharing URL:', shareableUrl); // Debug log
      
      let shareData;
      
      try {
        // Try to fetch the image first
        const response = await fetch(imageUrl);
        if (!response.ok) throw new Error('Failed to fetch image');
        
        const blob = await response.blob();
        const file = new File([blob], 'generated-image.png', { type: 'image/png' });
        
        shareData = {
          title: `Generated by ${creator.name}`,
          text: `Check out this amazing AI-generated image!`,
          url: shareableUrl,
          files: [file]
        };
      } catch (fetchError) {
        console.error('Error fetching image:', fetchError);
        // Fallback to sharing without the image file
        shareData = {
          title: `Generated by ${creator.name}`,
          text: `Check out this amazing AI-generated image!`,
          url: shareableUrl
        };
      }

      if (navigator.canShare && navigator.canShare(shareData)) {
        await navigator.share(shareData);
        toast({
          title: "Success",
          description: "Image shared successfully!",
        });
      } else {
        // Fallback to copying the URL
        await navigator.clipboard.writeText(shareableUrl);
        toast({
          title: "Success",
          description: "Image link copied to clipboard!",
        });
      }
    } catch (error) {
      console.error('Share error:', error);
      
      // Don't show error toast for user cancellation
      if (error instanceof Error && error.name === 'AbortError') {
        return;
      }
      
      toast({
        title: "Error",
        description: "Unable to share image. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <Button 
      variant="ghost" 
      size="sm" 
      className="p-1 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
      onClick={handleShare}
    >
      <Share2 className="h-4 w-4" />
    </Button>
  );
};